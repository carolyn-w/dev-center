(globalThis.webpackChunkgeocortex_dev_center=globalThis.webpackChunkgeocortex_dev_center||[]).push([[224],{3905:(e,t,o)=>{"use strict";o.d(t,{Zo:()=>c,kt:()=>u});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(o),u=n,b=d["".concat(s,".").concat(u)]||d[u]||m[u]||l;return o?r.createElement(b,a(a({ref:t},c),{},{components:o})):r.createElement(b,a({ref:t},c))}));function u(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=o.length,a=new Array(l);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,a[1]=i;for(var p=2;p<l;p++)a[p]=o[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},9230:(e,t,o)=>{"use strict";o.r(t),o.d(t,{frontMatter:()=>l,contentTitle:()=>a,metadata:()=>i,toc:()=>s,default:()=>c});var r=o(2122),n=(o(7294),o(3905));const l={title:"View Model Helper Class",description:"Geocortex Mobile - Learn about the base class for ViewModels in mobile, NotifyPropertyBase"},a=void 0,i={unversionedId:"mobile/sdk-components-viewmodel-helper-class",id:"mobile/sdk-components-viewmodel-helper-class",isDocsHomePage:!1,title:"View Model Helper Class",description:"Geocortex Mobile - Learn about the base class for ViewModels in mobile, NotifyPropertyBase",source:"@site/docs/mobile/sdk-components-viewmodel-helper-class.mdx",sourceDirName:"mobile",slug:"/mobile/sdk-components-viewmodel-helper-class",permalink:"/docs/mobile/sdk-components-viewmodel-helper-class",editUrl:"https://github.com/geocortex/dev-center/edit/master/docs/mobile/sdk-components-viewmodel-helper-class.mdx",version:"current",frontMatter:{title:"View Model Helper Class",description:"Geocortex Mobile - Learn about the base class for ViewModels in mobile, NotifyPropertyBase"},sidebar:"mobile",previous:{title:"Component Reference",permalink:"/docs/mobile/sdk-components-reference"},next:{title:"Component Styling",permalink:"/docs/mobile/sdk-components-styling"}},s=[{value:"Relevant SDK Sample",id:"relevant-sdk-sample",children:[]}],p={toc:s};function c({components:e,...t}){return(0,n.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"As per ",(0,n.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/xaml/xaml-basics/data-bindings-to-mvvm#a-simple-viewmodel"},".NET and Xamarin Forms guidelines"),", ViewModels usually implement the ",(0,n.kt)("inlineCode",{parentName:"p"},"INotifyPropertyChanged")," interface to inform the view of changes to the data model. This involves a lot of boilerplate, so Geocortex Mobile has a class, ",(0,n.kt)("inlineCode",{parentName:"p"},"NotifyPropertyBase"),", which handles the boilerplate and simplifies your code."),(0,n.kt)("p",null,"The ViewModel of the ",(0,n.kt)("a",{parentName:"p",href:"/docs/mobile/tutorial-implement-component-with-ui#example-progress-bar"},"progress bar custom component")," is a good example of this pattern."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"using App1.Components;\nusing VertiGIS.Mobile.Composition;\nusing VertiGIS.Mobile.Composition.Views;\n\n[assembly: ViewModel(typeof(ProgressBarComponentViewModel))]\nnamespace App1.Components\n{\n    public class ProgressBarComponentViewModel : NotifyPropertyBase\n    {\n        private double _progress = 0;\n\n        private bool _workComplete = false;\n\n        public double Progress\n        {\n            get => _progress;\n            set => SetProperty(ref _progress, value);\n        }\n\n        public bool WorkComplete\n        {\n            get => _workComplete;\n            set\n            {\n                SetProperty(ref _workComplete, value);\n                OnPropertyChanged(nameof(WorkNotComplete));\n            }\n        }\n\n        public bool WorkNotComplete => !WorkComplete;\n    }\n}\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"NotifyPropertyBase")," implements ",(0,n.kt)("inlineCode",{parentName:"p"},"INotifyPropertyChanged")," for you and provides a helper function, ",(0,n.kt)("inlineCode",{parentName:"p"},"SetProperty"),". This helper function will ensure that ",(0,n.kt)("inlineCode",{parentName:"p"},"OnPropertyChanged")," is called if the value has changed and that the underlying field is set."),(0,n.kt)("h2",{id:"relevant-sdk-sample"},"Relevant SDK Sample"),(0,n.kt)("p",null,"The Geocortex Mobile SDK Samples has an example of a ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/geocortex/vertigis-mobile-samples/tree/master/Geocortex.Mobile.Samples/Geocortex.Mobile.Samples/Samples/CustomSamples/BreadCrumbs"},"breadcrumbs component that uses a viewmodel"),"."))}c.isMDXComponent=!0}}]);