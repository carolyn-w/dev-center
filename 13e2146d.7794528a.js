(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return c}));var r=n(3),a=(n(0),n(255)),o=n(259);const i={title:"New Workflow Form Element API",author:"Ian Schmitz",authorTitle:"Software Architect",authorURL:"https://github.com/ianschmitz",authorImageURL:"https://github.com/ianschmitz.png",tags:["workflow"]},l={permalink:"/blog/2021/03/22/new-workflow-element-api",source:"@site/blog/2021-03-22-new-workflow-element-api.mdx",description:"Workflow 5.21 includes a new TypeScript form element API that you can use for building custom form elements using the Geocortex Workflow TypeScript SDK. The existing patterns and APIs you've been using for years to build custom form elements will continue to work, but we encourage you to try the new API when building new form elements.",date:"2021-03-22T00:00:00.000Z",tags:[{label:"workflow",permalink:"/blog/tags/workflow"}],title:"New Workflow Form Element API",readingTime:9.035,truncated:!0},s=[{value:"New State Management API",id:"new-state-management-api",children:[{value:"Improved <code>props</code> interface",id:"improved-props-interface",children:[]},{value:"<code>setValue()</code> and <code>setProperty()</code>",id:"setvalue-and-setproperty",children:[]}]},{value:"Simplified Element Registration",id:"simplified-element-registration",children:[]},{value:"Improved UI Consistency",id:"improved-ui-consistency",children:[]},{value:"Summary",id:"summary",children:[{value:"Simple Use Case",id:"simple-use-case",children:[]},{value:"Advanced Use Case",id:"advanced-use-case",children:[]}]}],p={toc:s};function c({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Workflow ",Object(a.b)("inlineCode",{parentName:"p"},"5.21")," includes a new TypeScript form element API that you can use for building custom form elements using the ",Object(a.b)(o.a,{to:"/docs/workflow/sdk-web-overview",mdxType:"Link"},"Geocortex Workflow TypeScript SDK"),". The existing patterns and APIs you've been using for years to build custom form elements will continue to work, but we encourage you to try the new API when building new form elements."),Object(a.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"To use these new features, you will need the latest version of Geocortex Workflow, as well as the Geocortex Workflow SDK."))),Object(a.b)("p",null,"The new form element API provides a number of new features and benefits:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"#new-state-management-api"}),"New state management API")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"#simplified-element-registration"}),"Simplified element registration")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"#improved-ui-consistency"}),"Improved UI consistency"))),Object(a.b)("h2",{id:"new-state-management-api"},"New State Management API"),Object(a.b)("p",null,"We've created a new state management API that improves custom form element development in a number of ways. Let's take a look in-depth at what's changed."),Object(a.b)("h3",{id:"improved-props-interface"},"Improved ",Object(a.b)("inlineCode",{parentName:"h3"},"props")," interface"),Object(a.b)("p",null,"We now provide an easy way to extend the props interface with additional public properties for your element. We've also flattened the element's properties from ",Object(a.b)("inlineCode",{parentName:"p"},"props.element")," onto the root of the ",Object(a.b)("inlineCode",{parentName:"p"},"props")," object and have removed unused properties that were used internally in the product but didn't make sense for most custom form elements:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-diff"}),"- import { CustomFormElementProps } from \"@geocortex/workflow/runtime/app/RegisterCustomFormElementBase\";\n+ import { FormElementProps } from \"@geocortex/workflow/runtime\";\n\n\n// The generic type argument provided to `FormElementProps`\n// allows you to specify the type of `value`.\n// This will strongly type `props.value` and `props.setValue()`.\n// You can now add additional properties to your element's\n// props interface. Previously there wasn't a great pattern\n// to declare additional properties for an element.\n+ interface DemoElementProps extends FormElementProps<number> {\n+    foo: string;\n+ }\n\n\n- function DemoElement(props: CustomFormElementProps) {\n+ function DemoElement(props: DemoElementProps) {\n    // Get the current `value`. Previously `value` wouldn't be\n    // strongly typed. Here we've typed as `number` as declared\n    // in our interface above.\n-   const currentValue = props.element.value;\n+   const currentValue = props.value;\n\n\n    // Get a custom `foo` property used by my element.\n+   const currentFoo = props.foo;\n\n\n    // ...\n}\n")),Object(a.b)("h3",{id:"setvalue-and-setproperty"},Object(a.b)("inlineCode",{parentName:"h3"},"setValue()")," and ",Object(a.b)("inlineCode",{parentName:"h3"},"setProperty()")),Object(a.b)("p",null,"These new APIs are included in the props interface and help to improve developer experience and ensure form consistency of both the UI presentation, but also the underlying element state."),Object(a.b)("p",null,"We've added the ",Object(a.b)("inlineCode",{parentName:"p"},"setProperty()")," API which is used to update properties of your element, such as additional public properties that you've added to your element by extending the ",Object(a.b)("inlineCode",{parentName:"p"},"FormElementProps")," interface."),Object(a.b)("p",null,"We've also added ",Object(a.b)("inlineCode",{parentName:"p"},"setValue()"),". ",Object(a.b)("inlineCode",{parentName:"p"},"setValue(value)")," is equivalent to calling ",Object(a.b)("inlineCode",{parentName:"p"},'setProperty("value", value)'),". Using the previous API, developers had to remember to raise the ",Object(a.b)("inlineCode",{parentName:"p"},"changed")," event when updating the ",Object(a.b)("inlineCode",{parentName:"p"},"value")," property on their element. This was necessary so that workflow authors could run sub-workflows on the ",Object(a.b)("inlineCode",{parentName:"p"},"change")," event of the element. This is no longer needed as the ",Object(a.b)("inlineCode",{parentName:"p"},"setValue()")," API will automatically raise the ",Object(a.b)("inlineCode",{parentName:"p"},"changed")," event for you."),Object(a.b)("p",null,"Additionally, the previous patterns didn't guarantee that the form would re-render after updating the properties of your element and could result in some challenging UI and data consistency issues. By using the ",Object(a.b)("inlineCode",{parentName:"p"},"setProperty()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"setValue()")," APIs, your form will automatically be re-rendered to ensure that the UI shows the most up-to-date state at all times."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-diff"}),'// Get the current `value`.\n- const currentValue = props.element.value;\n+ const currentValue = props.value;\n\n\n// Update the element\'s value.\n- props.element.value = value;\n- props.raiseEvent("changed", value);\n+ props.setValue(value);\n\n\n// Get a custom `foo` property used by my element.\n- const currentFoo = (props.element as any).foo;\n+ const currentFoo = props.foo;\n\n\n// Set the element\'s `foo` property.\n- (props.element as any).foo = foo;\n+ props.setProperty("foo", foo);\n')),Object(a.b)("h2",{id:"simplified-element-registration"},"Simplified Element Registration"),Object(a.b)("p",null,"To register your custom form elements using the previous API, you would need to create a Workflow activity that registers your element:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'export class RegisterDemoElement extends RegisterCustomFormElementBase {\n    execute(): void {\n        // Where `DemoElement` refers to a React component.\n        this.register("Demo", DemoElement);\n    }\n}\n')),Object(a.b)("p",null,"This added some extra boilerplate that we felt was unnecessary. More importantly it required the workflow author to run this element registration activity ",Object(a.b)("em",{parentName:"p"},"prior")," to running the ",Object(a.b)("em",{parentName:"p"},"Display Form")," activity that used the custom element. This was an awkward step that Workflow authors had to remember to do for their forms to render correctly."),Object(a.b)("p",null,"When registering your element using the new API and the latest version of the Workflow SDK, it is no longer necessary to run the activity prior to ",Object(a.b)("em",{parentName:"p"},"Display Form"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'const DemoElementRegistration: FormElementRegistration<DemoElementProps> = {\n    component: DemoElement,\n    id: "Demo",\n};\n\nexport default DemoElementRegistration;\n')),Object(a.b)("h2",{id:"improved-ui-consistency"},"Improved UI Consistency"),Object(a.b)("p",null,"The new ",Object(a.b)("inlineCode",{parentName:"p"},"setProperty()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"setValue()")," APIs make it much easier to develop Workflow elements using the common patterns developers are familiar with when building React components. Let's look at a simple example of a text input element built using the previous API:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"function Text(props: CustomFormElementProps) {\n    return (\n        <input\n            // When the text input changes, update the element's `value`.\n            onChange={(event) =>\n                (props.element.value = event.currentTarget.value)\n            }\n            // Show the element `value `in the text input.\n            value={props.element.value}\n        />\n    );\n}\n")),Object(a.b)("p",null,"There are a few gotchas here that are likely not obvious at first glance:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"We forgot to call ",Object(a.b)("inlineCode",{parentName:"li"},'props.raiseEvent("changed", value)'),". If the workflow author tried to run a sub-workflow on the change event of your element, it would never run."),Object(a.b)("li",{parentName:"ol"},"The re-rendering of the element wasn't deterministic previously. Even if we updated ",Object(a.b)("inlineCode",{parentName:"li"},"props.element.value")," ",Object(a.b)("em",{parentName:"li"},"and")," invoked ",Object(a.b)("inlineCode",{parentName:"li"},'props.raiseEvent("changed", value)'),", there was no guarantee that this element would re-render immediately. In that case the UI wouldn't show the updated value, and would be out-of-sync with the underlying state of the element."),Object(a.b)("li",{parentName:"ol"},Object(a.b)("inlineCode",{parentName:"li"},"value")," will be ",Object(a.b)("inlineCode",{parentName:"li"},"undefined")," during the initial render, until the ",Object(a.b)("inlineCode",{parentName:"li"},"onChange")," fires for the first time. There are ways to work around this such as running a sub-workflow on the ",Object(a.b)("inlineCode",{parentName:"li"},"load")," event to set the element's value, however this makes development awkward."),Object(a.b)("li",{parentName:"ol"},"Other parts of the system could update the element's ",Object(a.b)("inlineCode",{parentName:"li"},"value")," to a type that the element doesn't expect. For example, instead of ",Object(a.b)("inlineCode",{parentName:"li"},"value")," being a ",Object(a.b)("inlineCode",{parentName:"li"},"string")," like we expect, the workflow author could accidentally set the value to an ",Object(a.b)("inlineCode",{parentName:"li"},"object")," using the ",Object(a.b)("em",{parentName:"li"},"Set Form Element Property")," activity.")),Object(a.b)("p",null,"It was possible to overcome these gotchas, but it required additional logic that often wasn't immediately obvious. We've had to overcome these same challenges when writing form elements within Workflow itself."),Object(a.b)("p",null,"So how would we build this element using the new APIs and avoid the gotchas described above? Let's take a look:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'interface TextProps extends FormElementProps<string> {}\n\nfunction Text(props: TextProps) {\n    return (\n        <input\n            // 1. `setValue()` automatically raises the `changed`\n            // event for you.\n            onChange={(event) =>\n                props.setValue(event.currentTarget.value)\n            }\n            // 2. The component will be re-rendered immediately by\n            // using `setValue()`, ensuring that your UI and element\n            // state are consistent.\n            value={props.value}\n        />\n    );\n}\n\nconst TextElementRegistration: FormElementRegistration<TextProps> = {\n    component: Text,\n    id: "Text",\n    // 3. We can provide a default value, avoiding the initial\n    // `undefined` value.\n    getInitialProperties: () => ({ value: "" }),\n    // 4. We can ensure data consistency by sanitizing changes\n    // to our element\'s properties.\n    onPropertyChange: ({ properties, property }) => {\n        if (property === "value") {\n            const value = properties[property];\n\n            if (typeof value !== "string") {\n                throw new Error("Unexpected type");\n            }\n        }\n    },\n};\n')),Object(a.b)("h2",{id:"summary"},"Summary"),Object(a.b)("p",null,"So what does all of this mean in practice? Below we'll compare elements built using the new and old APIs."),Object(a.b)("h3",{id:"simple-use-case"},"Simple Use Case"),Object(a.b)("p",null,"Here's a simple text input element:"),Object(a.b)("h4",{id:"before"},"Before"),Object(a.b)("p",null,"For the sake of brevity, we've excluded the additional logic that would be needed to overcome the gotchas ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"#improved-ui-consistency"}),"described above"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import * as React from "react";\nimport { CustomFormElementProps } from "@geocortex/workflow/runtime/app/RegisterCustomFormElementBase";\n\nclass Text extends React.Component<CustomFormElementProps> {\n    render(props) {\n        return (\n            <input\n                value={props.element.value}\n                onChange={(event) => {\n                    this.props.element.value = value;\n                    this.props.raiseEvent("changed", value);\n                }}\n            />\n        );\n    }\n}\n\n/**\n * @displayName Text\n * @category Custom Activities\n * @description Registers the text input element for use in Display Form.\n */\nexport class RegisterTextElement extends RegisterCustomFormElementBase {\n    execute(): void {\n        this.register("Text", Text);\n    }\n}\n')),Object(a.b)("h4",{id:"after"},"After"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import {\n    FormElementProps,\n    FormElementRegistration,\n} from "@geocortex/workflow/runtime";\n\ninterface TextProps extends FormElementProps<string> {}\n\n/**\n * @displayName Text\n * @category Custom Activities\n * @description Displays a text input element.\n */\nfunction Text(props: TextProps) {\n    return (\n        <input\n            value={props.value}\n            onChange={(event) =>\n                props.setValue(event.currentTarget.value)\n            }\n        />\n    );\n}\n\nconst TextElementRegistration: FormElementRegistration<TextProps> = {\n    component: Text,\n    id: "Text",\n    getInitialProperties: () => ({\n        value: "Hello World",\n    }),\n};\n')),Object(a.b)("p",null,"Notice that updating the ",Object(a.b)("inlineCode",{parentName:"p"},"value")," for the element has been simplified by using the ",Object(a.b)("inlineCode",{parentName:"p"},"setValue()")," API. We're also now able to provide a default ",Object(a.b)("inlineCode",{parentName:"p"},"value")," of ",Object(a.b)("inlineCode",{parentName:"p"},'"Hello World"')," using ",Object(a.b)("inlineCode",{parentName:"p"},"getInitialProperties"),"."),Object(a.b)("h3",{id:"advanced-use-case"},"Advanced Use Case"),Object(a.b)("p",null,"Here's a more advanced element that displays a range slider with configurable min, max, and step settings:"),Object(a.b)("h4",{id:"before-1"},"Before"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import * as React from "react";\nimport {\n    CustomFormElementProps,\n    RegisterCustomFormElementBase,\n} from "@geocortex/workflow/runtime/app/RegisterCustomFormElementBase";\n\nclass RangeSlider extends React.Component<CustomFormElementProps> {\n    render() {\n        const { element, raiseEvent } = this.props;\n\n        return (\n            <div>\n                <input\n                    max={100}\n                    min={0}\n                    // Even though we\'re updating the element value, until\n                    // the element is re-rendered the UI won\'t update.\n                    onChange={(event) => {\n                        const value =\n                            event.currentTarget.valueAsNumber;\n                        element.value = value;\n                        raiseEvent("changed", value);\n                    }}\n                    step={5}\n                    type="range"\n                    // There\'s no way to guarantee that `value` is always a\n                    // `number`. A workflow could set the `value` to an\n                    // unexpected type such as by using the\n                    // `Set Form Element Property` activity.\n                    value={element.value as number}\n                />\n                {/* \n                    The element wasn\'t guaranteed to re-render, \n                    so this UI may not update immediately.\n                    `element.value` will be `undefined` initially\n                    until set the first time.\n                */}\n                <span>{element.value}</span>\n            </div>\n        );\n    }\n}\n\n/**\n * @displayName Register RangeSlider Form Element\n * @description Displays a number range slider.\n * @param props The props that will be provided by the Workflow runtime.\n */\nexport class RegisterRangeSliderElement extends RegisterCustomFormElementBase {\n    execute(): void {\n        this.register("RangeSlider", RangeSlider);\n    }\n}\n')),Object(a.b)("h4",{id:"after-1"},"After"),Object(a.b)("p",null,"Here's the same element but also including configurable ",Object(a.b)("inlineCode",{parentName:"p"},"max"),", ",Object(a.b)("inlineCode",{parentName:"p"},"min"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"step")," properties."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import * as React from "react";\nimport {\n    FormElementProps,\n    FormElementRegistration,\n} from "@geocortex/workflow/runtime";\n\ninterface RangeSliderProps extends FormElementProps<number> {\n    max: number;\n    min: number;\n    step: number;\n}\n\n/**\n * @displayName Range Slider\n * @description Displays a number range slider.\n * @param props The props that will be provided by the Workflow runtime.\n */\nfunction RangeSlider(props: RangeSliderProps): React.ReactElement {\n    const { max, min, setValue, step, value } = props;\n    return (\n        <div>\n            <input\n                max={max}\n                min={min}\n                onChange={(event) =>\n                    setValue(event.currentTarget.valueAsNumber)\n                }\n                step={step}\n                type="range"\n                value={value}\n            />\n            <span>{value}</span>\n        </div>\n    );\n}\n\nconst RangeSliderElementRegistration: FormElementRegistration<RangeSliderProps> = {\n    component: RangeSlider,\n    getInitialProperties: () => ({\n        max: 100,\n        min: 0,\n        step: 5,\n        value: 50,\n    }),\n    id: "RangeSlider",\n    onPropertyChange: ({ properties, property }) => {\n        if (\n            property === "max" ||\n            property === "min" ||\n            property === "step" ||\n            property === "value"\n        ) {\n            const value = properties[property];\n\n            // Ensure we always have the type we expect assigned to the element\n            // properties.\n            if (typeof value !== "number" || Number.isNaN(value)) {\n                throw new Error("Unexpected type");\n            }\n        }\n    },\n};\n\nexport default RangeSliderElementRegistration;\n')))}c.isMDXComponent=!0},255:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),c=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,b=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return n?a.a.createElement(b,l(l({ref:t},p),{},{components:n})):a.a.createElement(b,l({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},256:function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return i}));var r=n(21),a=n(257);function o(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(r.default)();return{withBaseUrl:(n,r)=>function(e,t,n,{forcePrependBaseUrl:r=!1,absolute:o=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if(Object(a.b)(n))return n;if(r)return t+n;const i=n.startsWith(t)?n:t+n.replace(/^\//,"");return o?e+i:i}(t,e,n,r)}}function i(e,t={}){const{withBaseUrl:n}=o();return n(e,t)}},257:function(e,t,n){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!r(e)}n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return a}))},259:function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=n(11),i=n(257),l=n(9);const s=Object(r.createContext)({collectLink:()=>{}});var p=n(256),c=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};t.a=function(e){var t,{isNavLink:n,to:u,href:m,activeClassName:d,isActive:b,"data-noBrokenLinkCheck":h,autoAddBaseUrl:f=!0}=e,v=c(e,["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"]);const{withBaseUrl:g}=Object(p.b)(),w=Object(r.useContext)(s),y=u||m,O=Object(i.a)(y),j=null==y?void 0:y.replace("pathname://",""),N=void 0!==j?(x=j,f&&(e=>e.startsWith("/"))(x)?g(x):x):void 0;var x;const P=Object(r.useRef)(!1),C=n?o.e:o.c,E=l.a.canUseIntersectionObserver;let k;Object(r.useEffect)((()=>(!E&&O&&window.docusaurus.prefetch(N),()=>{E&&k&&k.disconnect()})),[N,E,O]);const T=null!==(t=null==N?void 0:N.startsWith("#"))&&void 0!==t&&t,R=!N||!O||T;return N&&O&&!T&&!h&&w.collectLink(N),R?a.a.createElement("a",Object.assign({href:N},y&&!O&&{target:"_blank",rel:"noopener noreferrer"},v)):a.a.createElement(C,Object.assign({},v,{onMouseEnter:()=>{P.current||(window.docusaurus.preload(N),P.current=!0)},innerRef:e=>{var t,n;E&&e&&O&&(t=e,n=()=>{window.docusaurus.prefetch(N)},k=new window.IntersectionObserver((e=>{e.forEach((e=>{t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(k.unobserve(t),k.disconnect(),n())}))})),k.observe(t))},to:N||""},n&&{isActive:b,activeClassName:d}))}}}]);