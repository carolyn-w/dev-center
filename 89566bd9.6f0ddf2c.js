(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{236:function(e,o,t){"use strict";t.r(o),t.d(o,"frontMatter",(function(){return a})),t.d(o,"metadata",(function(){return i})),t.d(o,"rightToc",(function(){return l})),t.d(o,"default",(function(){return m}));var n=t(2),r=t(9),s=(t(0),t(294)),a={title:"View Model Helper Class",description:"Geocortex Mobile - Learn about the base class for ViewModels in mobile, NotifyPropertyBase"},i={id:"mobile/sdk-components-viewmodel-helper-class",title:"View Model Helper Class",description:"Geocortex Mobile - Learn about the base class for ViewModels in mobile, NotifyPropertyBase",source:"@site/docs/mobile/sdk-components-viewmodel-helper-class.mdx",permalink:"/docs/mobile/sdk-components-viewmodel-helper-class",editUrl:"https://github.com/geocortex/dev-center/edit/master/docs/mobile/sdk-components-viewmodel-helper-class.mdx",sidebar:"mobile",previous:{title:"Component Reference",permalink:"/docs/mobile/sdk-components-reference"},next:{title:"Component Styling",permalink:"/docs/mobile/sdk-components-styling"}},l=[{value:"Relevant SDK Sample",id:"relevant-sdk-sample",children:[]}],p={rightToc:l};function m(e){var o=e.components,t=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},p,t,{components:o,mdxType:"MDXLayout"}),Object(s.b)("p",null,"As per ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/xaml/xaml-basics/data-bindings-to-mvvm#a-simple-viewmodel"}),".NET and Xamarin Forms guidelines"),", ViewModels usually implement the ",Object(s.b)("inlineCode",{parentName:"p"},"INotifyPropertyChanged")," interface to inform the view of changes to the data model. This involves a lot of boilerplate, so Geocortex Mobile has a class, ",Object(s.b)("inlineCode",{parentName:"p"},"NotifyPropertyBase"),", which handles the boilerplate and simplifies your code."),Object(s.b)("p",null,"The ViewModel of the ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/mobile/tutorial-implement-component-with-ui#example-progress-bar"}),"progress bar custom component")," is a good example of this pattern."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cs"}),"using App1.Components;\nusing VertiGIS.Mobile.Composition;\nusing VertiGIS.Mobile.Composition.Views;\n\n[assembly: ViewModel(typeof(ProgressBarComponentViewModel))]\nnamespace App1.Components\n{\n    public class ProgressBarComponentViewModel : NotifyPropertyBase\n    {\n        private double _progress = 0;\n\n        private bool _workComplete = false;\n\n        public double Progress\n        {\n            get => _progress;\n            set => SetProperty(ref _progress, value);\n        }\n\n        public bool WorkComplete\n        {\n            get => _workComplete;\n            set\n            {\n                SetProperty(ref _workComplete, value);\n                OnPropertyChanged(nameof(WorkNotComplete));\n            }\n        }\n\n        public bool WorkNotComplete => !WorkComplete;\n    }\n}\n")),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"NotifyPropertyBase")," implements ",Object(s.b)("inlineCode",{parentName:"p"},"INotifyPropertyChanged")," for you and provides a helper function, ",Object(s.b)("inlineCode",{parentName:"p"},"SetProperty"),". This helper function will ensure that ",Object(s.b)("inlineCode",{parentName:"p"},"OnPropertyChanged")," is called if the value has changed and that the underlying field is set."),Object(s.b)("h2",{id:"relevant-sdk-sample"},"Relevant SDK Sample"),Object(s.b)("p",null,"The Geocortex Mobile SDK Samples has an example of a ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/geocortex/vertigis-mobile-samples/tree/master/Geocortex.Mobile.Samples/Geocortex.Mobile.Samples/Samples/CustomSamples/BreadCrumbs"}),"breadcrumbs component that uses a viewmodel"),"."))}m.isMDXComponent=!0}}]);